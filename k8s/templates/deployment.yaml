apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  labels:
    app: {{ .Values.app.labels.app }}
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.app.labels.app }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.labels.app }}
    spec:
      initContainers:
        - name: init-mysql
          image: mysql:8
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: {{ .Values.credentials.root.password }}
          command:
            - sh
            - -c
            - >
              until mysqladmin ping -h mycluster.mysql-operator.svc.cluster.local --silent; do echo 'waiting for database'; sleep 5; done;
              mysql -u {{ .Values.credentials.root.user }} -p$MYSQL_ROOT_PASSWORD -h mycluster.mysql-operator.svc.cluster.local -e "CREATE DATABASE IF NOT EXISTS {{ .Values.db.name }};"
      containers:
        - name: {{ .Values.app.name }}
          image: {{ .Values.app.image }}
          ports:
            - containerPort: {{ .Values.app.containerPort }}
          env:
            - name: FLASK_APP
              value: {{ .Values.app.env.FLASK_APP }}
            - name: FLASK_ENV
              value: {{ .Values.app.env.FLASK_ENV }}
            - name: DATABASE_URL
              value: "mysql+pymysql://{{ .Values.credentials.root.user }}:{{ .Values.credentials.root.password }}@mycluster.mysql-operator.svc.cluster.local:3306/{{ .Values.db.name }}"
          resources:
            requests:
              memory: {{ .Values.app.resources.requests.memory }}
              cpu: {{ .Values.app.resources.requests.cpu }}
            limits:
              memory: {{ .Values.app.resources.limits.memory }}
              cpu: {{ .Values.app.resources.limits.cpu }}

